#! /bin/bash

if [ -e $1.gopts ]
then
    exec 0<$1.gopts 1>$1
    chmod +x $1
else
    echo "Input file $1.gopts doesn't exist."
    exit 1
fi

gen_option()
{
    SHORTOPT=
    LONGOPT=
    FIRSTARG=true
    DEFAULT=
    SCANARGS=true
    for i in $1
    do
    if $SCANARGS
    then
	case $i in
	    --* )
		$FIRSTARG && echo >&2 "Error: No OPTNAME in $1"
		FIRSTARG=false
		REQ_ARG=true
		LONGOPT="$i"
		LONGPARSE="$LONGPARSE
	${i%%=*} )
	    [[ \$# < 2 ]] && opt_err_req_arg $i
	    shift
	    OPTARG_$OPTNAME=true
	    OPTVAL_$OPTNAME=\"\$1\"
	    ;;
	${i%%=*}=* )
	    OPTARG_$OPTNAME=true
	    OPTVAL_$OPTNAME=\"\${1#${i%%=*}=}\"
	    ;;"
		;;
	    -* )
		$FIRSTARG && echo >&2 "Error: No OPTNAME in $1"
		FIRSTARG=false
		REQ_SARG=true
		SHORTOPT="$i"
		SHORTPARSE="$SHORTPARSE
		${i:1:1} )
		    OPTARG_$OPTNAME=true
		    OPTVAL_$OPTNAME=\"\${OPTTMP:1}\"
		    if [[ -z \"\$OPTVAL_$OPTNAME\" ]]
		    then
			[[ \$# < 2 ]] && opt_err_req_sarg ${i:1:1}
			shift
			OPTVAL_$OPTNAME=\"\$1\"
		    else
			break
		    fi
		    ;;"
		;;
	    * )
		if $FIRSTARG
		then
		    FIRSTARG=false
		    OPTNAME="$i"
		else
		    SCANARGS=false
		    DEFAULT="$i"
		fi
		;;
	    esac
	else
	    DEFAULT="$DEFAULT $i"
	fi
    done
    DEFVARS="$DEFVARS
OPTARG_$OPTNAME=false
OPTVAL_$OPTNAME=$DEFAULT"
    genhelp "$SHORTOPT" "$LONGOPT" "$2"
}

gen_switch()
{
    SHORTOPT=
    LONGOPT=
    FIRSTARG=true
    for i in $1
    do
       case $i in
       --* )
	    $FIRSTARG && echo >&2 "Error: No OPTNAME in $1"
	    FIRSTARG=false
	    NO_ARG=true
	    LONGOPT="$i"
	    if $3
	    then
		OPTCNTMP="
	    OPTCNT_$OPTNAME=\$[OPTCNT_$OPTNAME+1]"
	    else
		OPTCNTMP=
	    fi
	    LONGPARSE="$LONGPARSE
	$i )
	    OPTARG_$OPTNAME=true$OPTCNTMP
	    ;;
	$i=* )
	    opt_err_no_arg $i
	    ;;"
	    ;;
       -* )
	    $FIRSTARG && echo >&2 "Error: No OPTNAME in $1"
	    FIRSTARG=false
	    SHORTOPT="$i"
	    if $3
	    then
		OPTCNTMP="
		    OPTCNT_$OPTNAME=\$[OPTCNT_$OPTNAME+1]"
	    else
		OPTCNTMP=
	    fi
	    SHORTPARSE="$SHORTPARSE
		${i:1:1} )
		    OPTARG_$OPTNAME=true$OPTCNTMP
		    ;;"
	    ;;
	* )
	    if $FIRSTARG
	    then
		FIRSTARG=false
		OPTNAME="$i"
	    else
		echo >&2 "No default allowed for @switch in $1"
	    fi
	    ;;
	esac
    done
    if $3
    then
	OPTCNTMP="
OPTCNT_$OPTNAME=0"
    else
	OPTCNTMP=
    fi
    DEFVARS="$DEFVARS
OPTARG_$OPTNAME=false$OPTCNTMP"
    genhelp "$SHORTOPT" "$LONGOPT" "$2"
}

genhelp()
{
OPTITA=
OPTITB=
    if [[ ! -z "$1" ]]
    then
	OPTITA=x
    fi
    if [[ ! -z "$2" ]]
    then
	OPTITB=y
    fi
    case "$OPTITA$OPTITB" in
	"" )
	    echo >&2 "Error: No options defined for for $2"
	    ;;
	x )
	    if [[ -z "${1:2}" ]]
	    then
		OPTSTRING="${1:0:2}"
	    else
		OPTSTRING="${1:0:2} ${1:3}"
	    fi
	    ;;
	y )
		OPTSTRING="    $2"
	    ;;
	xy )
		OPTSTRING="${1:0:2}, $2"
	    ;;
    esac
    if [[ ${#OPTSTRING} -gt $HELPSIZE ]]
    then HELPSIZE=${#OPTSTRING}
    fi
    HELP="$HELP
usehelpi \"$OPTSTRING\"
$REPLYTO"
}

usehelpi()
{
    OPTSTRING="$1$SPACES"
    OPTSTRING="${OPTSTRING:0:$HELPSIZE}"
    if [[ ${#1} -gt $HELPSIZE ]]
    then
	OPTSTRING="$1 "
    fi
    HELPFL=true
}
SPACES="                           "
usehelp()
{
    if $HELPFL
    then
	echo "  $OPTSTRING${HELPS[$1]}"
	HELPFL=false
    else
	echo "  ${SPACES:0:$HELPSIZE}${HELPS[$1]}"
    fi
}
init_gen()
{
    if [[ $HELPSIZE -gt 24 ]]
    then
	HELPSIZE=27
    else
	HELPSIZE=$[$HELPSIZE+2]
    fi
    REPLYTO="usehelp $HELPSC"
    HELPS[$HELPSC]='display this help and exit'
    HELPSC=$[$HELPSC+1]
    gen_switch "HELP -h --help" "$REPLYTO" false
    REPLYTO="usehelp $HELPSC"
    HELPS[$HELPSC]='output version information and exit'
    HELPSC=$[$HELPSC+1]
    gen_switch "VERSION --version" "$REPLYTO" false
}

PROGRAM=
VERSION=
YEAR=
AUTHOR=
BUGSTO=
USAGE=
SHORT=
DEFAULTS_TXT=
DEFAULTS=
FREECOPY=
NLS=
NLSINIT=

DEFVARS=
LONGPARSE=
SHORTPARSE=
HELP=
HELPSIZE=0
REQ_ARG=false
NO_ARG=false
REQ_SARG=false

declare -a HELPS
HELPSC=0

readto()
{
    REPLYTO=
    while :
    do
	read
	if [[ -z "$REPLY" ]]
	then break
	fi
    REPLYTO="$REPLYTO
$REPLY"
    done
    if [[ ! -z "$1" ]]
    then
	eval $1\=\"\$REPLYTO\"
    fi
}
readtoz()
{
    REPLYTO=
    while :
    do
	read
	if [[ -z "$REPLY" ]]
	then break
	fi
	REPLYTO="$REPLYTO
usehelp $HELPSC"
	HELPS[$HELPSC]="$REPLY"
	HELPSC=$[$HELPSC+1]
    done
}

while :
do
    read FUNC ARGS
    case "$FUNC" in
    @genopts )
	;;
    @program )
	PROGRAM="$ARGS"
	;;
    @version )
	VERSION="$ARGS"
	;;
    @year )
	YEAR="$ARGS"
	;;
    @author )
	AUTHOR="$ARGS"
	;;
    @bugsto )
	BUGSTO="
Report bugs to $ARGS."
	;;
    @usage )
	USAGE="$ARGS"
	;;
    @short )
	readto SHORT
	;;
    @defaults )
	readto DEFAULTS_TXT
	if [[ ! -z "$ARGS" ]]
	then
	    DEFAULTS_TXT="$DEFAULTS_TXT
Options can be stored in $ARGS environment variables."
	    DEFAULTS="\$$ARGS "
	fi
	[[ ! -z DEFAULTS_TXT ]] && DEFAULTS_TXT="$DEFAULTS_TXT
"
	;;
    @free_copy )
	FREECOPY='
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.'
	;;
    @textdomain )
	NLS='$'
	NLSINIT="

TEXTDOMAIN=$ARGS"
	;;
    @end )
	init_gen
	break
	;;
    "" )
	;;
    @switch )
	readtoz
	gen_switch "$ARGS" "$REPLYTO" false
	;;
    @cntswitch )
	readtoz
	gen_switch "$ARGS" "$REPLYTO" true
	;;
    @option )
	readtoz
	gen_option "$ARGS" "$REPLYTO"
	;;
    * )
	echo >&2 "Warning: Unknown token $FUNC."
    esac
done

echo '#! /bin/bash
# This file is generated by genopts from '"$1"'.gopts.'"$NLSINIT"'

opt_err()
{
    echo '"$NLS"'"$0: $1
Try \`$0 --help'\'' for more information." >&2
    exit 1
}

opt_err_bad_arg()
{
    opt_err '"$NLS"'"unrecognized option \`$1'\''"
}

opt_err_bad_sarg()
{
    opt_err '"$NLS"'"invalid option -- $1"
}'

if $REQ_ARG
then echo '
opt_err_req_arg()
{
    opt_err '"$NLS"'"option \`$1'\'' requires an argument"
}'
fi

if $NO_ARG
then echo '
opt_err_no_arg()
{
    opt_err '"$NLS"'"option \`$1'\'' doesn'\''t allow an argument"
}'
fi

if $REQ_SARG
then echo '
opt_err_req_sarg()
{
    opt_err '"$NLS"'"option requires an argument -- $1"
}'
fi

echo '
opt_arg_version()
{
    echo '"$NLS\"$PROGRAM $VERSION
Written by $AUTHOR.

Copyright (C) $YEAR $AUTHOR$FREECOPY\"
    exit 0
}

opt_arg_usage()
{
    echo $NLS\"Usage: \$0 $USAGE$SHORT
"
eval "$HELP"
echo "$DEFAULTS_TXT$BUGSTO\"
    exit 0
}

declare -a ARGV$DEFVARS"

echo '
optarg_parse()
{
    until [ $# -eq 0 ]
    do
	case "$1" in'"$LONGPARSE"'
	-- )
	    shift
	    ARGV=("${ARGV[@]}" "$@")
	    break
	    ;;
	--* )
	    opt_err_bad_arg $1
	    ;;
	- )
	    ARGV=("${ARGV[@]}" "$1")
	    ;;
	-* )
	    OPTTMP="${1:1}"
	    until [[ -z "$OPTTMP" ]]
	    do
		case "${OPTTMP:0:1}" in'"$SHORTPARSE"'
		* )
		    opt_err_bad_sarg ${OPTTMP:0:1}
		    ;;
		esac
	    OPTTMP="${OPTTMP:1}"
	    done
	    ;;
	* )
	    ARGV=("${ARGV[@]}" "$1")
	    ;;
	esac
    shift
    done
}

optarg_parse '"$DEFAULTS"'"$@"

$OPTARG_HELP && opt_arg_usage
$OPTARG_VERSION && opt_arg_version

unset opt_err opt_err_bad_arg opt_err_bad_sarg\'

if $REQ_ARG
then echo -n ' opt_err_req_arg'
fi

if $NO_ARG
then echo -n ' opt_err_no_arg'
fi

if $REQ_SARG
then echo -n ' opt_err_req_sarg'
fi

echo ' opt_arg_version\
 opt_arg_usage optarg_parse OPTTMP

# end of parser
'

while read
do
    echo "$REPLY"
done
